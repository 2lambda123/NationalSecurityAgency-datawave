
################################################################
# Test /Query/EventQuery/create endpoint

# Set the $DATA variable for the 'curl -d' args to specify the query expression,
# and other required params...

setData query=anarchy \
        queryName=EventQueryTest001 \
        begin=20130301 \
        end=20130401 \
        pagesize=1 \
        auths=PUBLIC \
        columnVisibility=PRIVATE \
        query.syntax=LUCENE

TEST_ID="EventQueryCreate"
TEST_DESCRIPTION="Creates a valid, un-fielded EventQuery"
TEST_URL_OPTS="--header 'Content-Type: application/x-www-form-urlencoded' ${DATA} -X POST ${URI_ROOT}/Query/EventQuery/create"
EXPECTED_RESPONSE_TYPE="application/xml"
EXPECTED_RESPONSE_CODE=200
EXPECTED_RESPONSE_BODY_ASSERTION=false

# We run the above test here (rather than in run.sh), so that we can guarantee proper execution order,
# as we need to parse out the dynamic query-id to configure follow-on tests below

runTest

################################################################
# Test /Query/${QUERY_ID}/next endpoint

setQueryIdFromResponseXml

[ -z "${QUERY_ID}" ] && warn "Failed to parse a query id from \$ACTUAL_RESPONSE_BODY"

TEST_ID="EventQueryNext"
TEST_DESCRIPTION="Gets the first page of results for the EventQueryCreate test"
TEST_URL_OPTS="-X GET ${URI_ROOT}/Query/${QUERY_ID}/next"
EXPECTED_RESPONSE_TYPE="application/xml"
EXPECTED_RESPONSE_CODE=200
EXPECTED_RESPONSE_BODY_ASSERTION=false

runTest

################################################################
# Test /Query/${QUERY_ID}/close endpoint

TEST_ID="EventQueryClose"
TEST_DESCRIPTION="Closes the query as necessary"
TEST_URL_OPTS="-X PUT ${URI_ROOT}/Query/${QUERY_ID}/close"
EXPECTED_RESPONSE_TYPE="application/xml"
EXPECTED_RESPONSE_CODE=200
EXPECTED_RESPONSE_BODY_ASSERTION=false

# This last test is executed by run.sh, as usual